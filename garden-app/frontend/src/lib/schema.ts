/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/gardens": {
    /**
     * Get all Gardens 
     * @description Query for a list of all Gardens. Optionally include end-dated Gardens.
     */
    get: operations["getAllGardens"];
    /**
     * Create a new Garden 
     * @description Create a new Garden resource.
     */
    post: operations["createGarden"];
  };
  "/gardens/{gardenID}": {
    /**
     * Get a Garden 
     * @description Get details of a Garden.
     */
    get: operations["getGarden"];
    /**
     * End-date a Garden 
     * @description End-date a Garden. This allows deleting without actually losing the resource data. Once a Garden is end-dated, certain resources will not be available such as health and action.
     */
    delete: operations["endDateGarden"];
    /**
     * Update/Edit a Garden 
     * @description Update/Edit a Garden. Only certain fields of a Garden are editable.
     */
    patch: operations["updateGarden"];
  };
  "/gardens/{gardenID}/action": {
    /**
     * Execute action on a Garden 
     * @description This endpoint allows executing certain actions on a Garden. This will actually interact with the `garden-controller` rather than just manipulating resources.
     */
    post: operations["gardenAction"];
  };
  "/gardens/{gardenID}/plants": {
    /**
     * Get all Plants 
     * @description Query for a list of all Plants. Optionally include end-dated Plants.
     */
    get: operations["getAllPlants"];
    /**
     * Add a Plant 
     * @description Adds a new Plant to this Garden.
     */
    post: operations["addPlant"];
  };
  "/gardens/{gardenID}/plants/{plantID}": {
    /**
     * Get a Plant 
     * @description Get details of a Plant.
     */
    get: operations["getPlant"];
    /**
     * End-date a Plant 
     * @description End-date a Plant. This allows deleting without actually losing the resource data. Once a Plant is end-dated, certain resources will not be available such as health and action.
     */
    delete: operations["endDatePlant"];
    /**
     * Update/Edit a Plant 
     * @description Update/Edit a Plant. Only certain fields of a Plant are editable.
     */
    patch: operations["updatePlant"];
  };
  "/gardens/{gardenID}/zones": {
    /**
     * Get all Zones 
     * @description Query for a list of all Zones. Optionally include end-dated Zones.
     */
    get: operations["getAllZones"];
    /**
     * Add a Zone 
     * @description Adds a new Zone to this Garden.
     */
    post: operations["addZone"];
  };
  "/gardens/{gardenID}/zones/{zoneID}": {
    /**
     * Get a Zone 
     * @description Get details of a Zone.
     */
    get: operations["getZone"];
    /**
     * End-date a Zone 
     * @description End-date a Zone. This allows deleting without actually losing the resource data. Once a Zone is end-dated, certain resources will not be available such as health and action.
     */
    delete: operations["endDateZone"];
    /**
     * Update/Edit a Zone 
     * @description Update/Edit a Zone. Only certain fields of a Zone are editable.
     */
    patch: operations["updateZone"];
  };
  "/gardens/{gardenID}/zones/{zoneID}/action": {
    /**
     * Execute action on a Zone 
     * @description This endpoint allows executing certain actions on a Zone. This will actually interact with the `garden-controller` rather than just manipulating resources.
     */
    post: operations["zoneAction"];
  };
  "/gardens/{gardenID}/zones/{zoneID}/history": {
    /**
     * Get Zone's watering history 
     * @description This endpoint retrieves information about past watering events for this Zone
     */
    get: operations["zoneHistory"];
  };
  "/water_schedules": {
    /**
     * Get all WaterSchedules 
     * @description Query for a list of all WaterSchedules. Optionally include end-dated WaterSchedules.
     */
    get: operations["getAllWaterSchedules"];
    /**
     * Add a WaterSchedule 
     * @description Adds a new WaterSchedule.
     */
    post: operations["addWaterSchedule"];
  };
  "/water_schedules/{waterScheduleID}": {
    /**
     * Get a WaterSchedule 
     * @description Get details of a WaterSchedule.
     */
    get: operations["getWaterSchedule"];
    /**
     * End-date a WaterSchedule 
     * @description End-date a WaterSchedule. This allows deleting without actually losing the resource data. Once a WaterSchedule is end-dated, certain resources will not be available such as health and action.
     */
    delete: operations["endDateWaterSchedule"];
    /**
     * Update/Edit a WaterSchedule 
     * @description Update/Edit a WaterSchedule. Only certain fields of a WaterSchedule are editable.
     */
    patch: operations["updateWaterSchedule"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description 20 character unique identifier used throughout this API 
     * @example 9m4e2mr0ui3e8a215n4g
     */
    xid: string;
    /** @description used for JSON Hypermedia to link to additional resources */
    link: {
      /** @description one-word explanation of what this link is for */
      ref?: string;
      /** @description relative path for the specified resource */
      href?: string;
    };
    /** @description This allows updating/editing a Plant resource */
    UpdatePlantRequest: components["schemas"]["Plant"] & {
      /**
       * Format: date-time 
       * @description the date-time when the Plant was originally created
       */
      created_at?: string;
    };
    /** @description List of all Plants */
    AllPlantsResponse: {
      plants?: (components["schemas"]["PlantResponse"])[];
    };
    /** @description This allows creating a Plant resource */
    CreatePlantRequest: WithRequired<components["schemas"]["Plant"], "name" | "zone_id">;
    /** @description This is the response object for Plants that contains extra information only available on Plants that are created */
    PlantResponse: WithRequired<components["schemas"]["Plant"] & {
      id?: components["schemas"]["xid"];
      /**
       * Format: date-time 
       * @description the date-time when the Plant was originally created
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description the date-time when the Plant was deleted/removed
       */
      end_date?: string;
      /**
       * Format: date-time 
       * @description time of the next scheduled watering
       */
      next_water_time?: string;
      /**
       * Format: float 
       * @description moisture percentage of a Plant with a soil moisture sensor
       */
      moisture?: number;
      /**
       * @example [
       *   {
       *     "rel": "self",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0/zones/c22tmvucie6n6gdrpal0/plants/c3ucvu06n88pt1dom670"
       *   },
       *   {
       *     "rel": "garden",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0"
       *   },
       *   {
       *     "rel": "zone",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0/zones/c22tmvucie6n6gdrpal0"
       *   }
       * ]
       */
      links?: (components["schemas"]["link"])[];
    }, "id" | "created_at" | "links" | "name">;
    /**
     * @description This represents a single Plant, or more generally a "watered resource," attached to the `garden-controller`.
     * It has a `plant_position` field to inform the `garden-controller` of which pump or valve to control for watering.
     */
    Plant: {
      /**
       * @description this is the name of the Plant 
       * @example lettuce
       */
      name?: string;
      /** @description ID referencing the Zone that this Plant is a part of */
      zone_id?: components["schemas"]["xid"];
      /** @description this holds various additional information about a Plant that might be useful to remember, but is not related to core functionality of this application. */
      details?: {
        /**
         * @description a general description of a Plant 
         * @example nutritious leafy green
         */
        description?: string;
        /**
         * @description general notes about the Plant 
         * @example grown from seed and planted about 6 inches apart
         */
        notes?: string;
        /**
         * @description estimate of time it takes Plant to grow 
         * @example 70 days
         */
        time_to_harvest?: string;
        /**
         * @description number of actual plants that would be managed 
         * @example 6
         */
        count?: number;
      };
    };
    /** @description information about the Garden controller's health status */
    GardenHealth: {
      /**
       * @description current status of a Garden 
       * @enum {string}
       */
      status?: "UP" | "DOWN" | "N/A";
      /** @description additional details about the Garden's health. May contain error details if health status was unavailable */
      details?: string;
      /**
       * Format: date-time 
       * @description the last time the Garden reported its status
       */
      last_contact?: string;
    };
    /** @description collects all the possible actions for a Garden into a single struct so these can easily be received as one request */
    GardenAction: {
      light?: components["schemas"]["LightAction"];
      stop?: components["schemas"]["StopAction"];
    };
    /** @description turn a Garden's light on or off. If left blank or empty, it will toggle the current state */
    LightAction: {
      state?: components["schemas"]["LightState"];
      /**
       * Format: duration 
       * @description duration string to determine how long to delay turning the light on. Only allowed to be used with state=OFF 
       * @example 14h
       */
      for_duration?: string;
    };
    /** @description instruct a Garden to stop watering */
    StopAction: {
      /** @description whether or not the Garden's watering queue should be cleared in addition to stopping current watering */
      all?: boolean;
    };
    /**
     * @description state that will be set by the next action 
     * @enum {string}
     */
    LightState: "ON" | "OFF";
    /** @description This allows creating a Garden resource */
    CreateGardenRequest: WithRequired<components["schemas"]["Garden"], "name">;
    /** @description This allows updating/editing a Garden resource */
    UpdateGardenRequest: components["schemas"]["Garden"] & {
      /**
       * Format: date-time 
       * @description the date-time when the Garden was originally created
       */
      created_at?: string;
    };
    /** @description This is the response object for Gardens that contains extra information only available on Gardens that are created */
    GardenResponse: WithRequired<components["schemas"]["Garden"] & {
      id?: components["schemas"]["xid"];
      /**
       * Format: date-time 
       * @description the date-time when the Garden was originally created
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description the date-time when the Garden was deleted/removed
       */
      end_date?: string;
      /** @description time and state for the next scheduled LightAction */
      next_light_action?: {
        /**
         * Format: date-time 
         * @description date-time of the next action
         */
        time?: string;
        state?: components["schemas"]["LightState"];
      };
      health?: components["schemas"]["GardenHealth"];
      /**
       * @description the number of active (not end-dated) Plants in this Garden 
       * @example 1
       */
      num_plants?: number;
      /**
       * @description the number of active (not end-dated) Zones in this Garden 
       * @example 1
       */
      num_zones?: number;
      /**
       * @description link specifically for the collection of Plants 
       * @example {
       *   "rel": "collection",
       *   "href": "/gardens/c6corm5mk1u53v1dchq0/plants"
       * }
       */
      plants?: components["schemas"]["link"];
      /**
       * @description link specifically for the collection of Zones 
       * @example {
       *   "rel": "collection",
       *   "href": "/gardens/c6corm5mk1u53v1dchq0/zones"
       * }
       */
      zones?: components["schemas"]["link"];
      /**
       * @example [
       *   {
       *     "rel": "self",
       *     "href": "/gardens/c6corm5mk1u53v1dchq0"
       *   },
       *   {
       *     "rel": "health",
       *     "href": "/gardens/c6corm5mk1u53v1dchq0/health"
       *   },
       *   {
       *     "rel": "plants",
       *     "href": "/gardens/c6corm5mk1u53v1dchq0/plants"
       *   },
       *   {
       *     "rel": "zones",
       *     "href": "/gardens/c6corm5mk1u53v1dchq0/zones"
       *   },
       *   {
       *     "rel": "action",
       *     "href": "/gardens/c6corm5mk1u53v1dchq0/action"
       *   }
       * ]
       */
      links?: (components["schemas"]["link"])[];
    }, "id" | "created_at" | "plants" | "zones" | "links">;
    /** @description List of all Gardens */
    AllGardensResponse: {
      gardens?: (components["schemas"]["GardenResponse"])[];
    };
    /** @description A Garden corresponds to a `garden-controller` in the real-world and contains all the necessary information for interacting with it */
    Garden: {
      /**
       * @description A descriptive name for the Garden 
       * @example Garden
       */
      name?: string;
      /**
       * @description This is the prefix of the MQTT topic for sending messages to the controller, so it is recommended to avoid spaces and the following characters are not allowed: `[$#*>+/]`
       *  
       * @example garden
       */
      topic_prefix?: string;
      /**
       * @description used to help with validation and avoid errors. This represents the maximum number of Zones that this Garden is able to water 
       * @example 3
       */
      max_zones: number;
      /** @description describes when to turn on a light and for how long to leave it on */
      light_schedule?: {
        /**
         * Format: duration 
         * @description duration string to determine how long to leave a light on 
         * @example 14h
         */
        duration: string;
        /**
         * Format: time 
         * @description time that the light should be turned on 
         * @example 23:00:00-07:00
         */
        start_time: string;
        /**
         * Format: date-time 
         * @description if a light delay was used, this persists the time that the light needs to turn back on
         */
        adhoc_on_time?: string;
      };
    };
    /**
     * @description Allows control over how/when the Zone is watered. The `interval` is used to control the amount of time the pump runs to water the Garden.
     * Specifying a `minimum_moisture` will instruct the server to consider moisture sensor data when executing the WaterAction.
     * To avoid falsely triggering watering and avoid the complexity if constantly checking moisture data, the moisture is only checked when executing a WaterAction.
     */
    WaterSchedule: {
      /**
       * @description amount of time, in Duration format, that Plant should be watered 
       * @example 15000ms
       */
      duration: string;
      /**
       * Format: duration 
       * @description amount of time, as a Duration string, to wait between scheduled watering 
       * @example 72h
       */
      interval: string;
      /**
       * Format: date-time 
       * @description time that the watering interval should be started at
       */
      start_time: string;
      /** @description control watering based on weather data. Requires a configured weather client */
      weather_control?: components["schemas"]["WeatherControl"];
      /** @description optional name for the WaterSchedule */
      name?: string;
      /** @description optional description for the WaterSchedule */
      description?: string;
    };
    /** @description This allows updating/editing a WaterSchedule resource */
    UpdateWaterScheduleRequest: components["schemas"]["WaterSchedule"];
    /** @description List of all WaterSchedules */
    AllWaterSchedulesResponse: {
      water_schedules?: (components["schemas"]["WaterScheduleResponse"])[];
    };
    /** @description This allows creating a WaterSchedule resource */
    CreateWaterScheduleRequest: WithRequired<components["schemas"]["WaterSchedule"], "duration" | "interval" | "start_time">;
    /** @description This is the response object for WaterSchedules that contains extra information only available on WaterSchedules that are created */
    WaterScheduleResponse: WithRequired<components["schemas"]["WaterSchedule"] & {
      id?: components["schemas"]["xid"];
      /**
       * Format: date-time 
       * @description the date-time when the WaterSchedule was deleted/removed
       */
      end_date?: string;
      /**
       * Format: date-time 
       * @description time of the next scheduled watering
       */
      next_water_time?: string;
      /**
       * Format: duration 
       * @description duration of the next scheduled watering. If WeatherControl is enabled, this will adjust for scaling based on
       * currently-available data
       *  
       * @example 10m0s
       */
      next_water_duration?: string;
      weather_data?: components["schemas"]["link"];
      /**
       * @example [
       *   {
       *     "rel": "self",
       *     "href": "/water_schedules/c22tmvucie6n6gdrpal0"
       *   }
       * ]
       */
      links?: (components["schemas"]["link"])[];
    }, "id" | "links">;
    WeatherControl: {
      /**
       * @description scale watering based on total rainfall between now and the last scheduled watering
       * time (even if watering was skipped at the last scheduled time). This uses an "inverted scale"
       * so higher input values cause scaling < 1. Also it will only scale in this direction. Values
       * are in millimeters. The example configuration will scale to zero if rainfall >= 25.4mm (1 in)
       *  
       * @example {
       *   "baseline_value": 0,
       *   "factor": 1,
       *   "range": 25.4
       * }
       */
      rain_control?: components["schemas"]["ScaleControl"];
      /**
       * @description scale watering based on recent average high temeperatures. Values are in degrees Celsius. With
       * the example configuration, an average high of 18C will result in scaling factor of 0.55
       *  
       * @example {
       *   "baseline_value": 27,
       *   "factor": 0.5,
       *   "range": 10
       * }
       */
      temperature_control?: components["schemas"]["ScaleControl"];
      /** @description skip watering based on temperature measurements */
      moisture_control?: {
        /**
         * @description this is a percentage representing the threshold that the Plant's moisture must be
         * below to enable a WaterAction
         *  
         * @example 50
         */
        minimum_moisture?: number;
      };
    };
    /**
     * @description ScaleControl is a generic type that allows for a flexible configuration to
     * control scaling of watering duration based on external factors.
     */
    ScaleControl: {
      /**
       * Format: float 
       * @description this is the value where scaling starts from
       */
      baseline_value?: number;
      /**
       * Format: float 
       * @description maximum amount that this will scale by. The value must be between 0 and 1,
       * where 0 is no scaling and 1 scale by the full proportion of the range
       */
      factor?: number;
      /**
       * Format: float 
       * @description the most extreme value (when added to baseline_value) that scaling will be 
       * affected by (used as max/min)
       */
      range?: number;
    };
    /**
     * @description A Zone corresponds to a "waterable resource" and enabled direct control of `garden-controller` watering devices.
     * It holds a WaterSchedule and can be referenced by Plants to track their watering and location. This allows watering
     * multiple Plants from a single control and is useful for larger Garden setups, such as an outdoor Garden with beds.
     */
    Zone: {
      /**
       * @description this is the name of the Zone 
       * @example Raised Bed 1
       */
      name?: string;
      /** @description this holds various additional information about a Zone that might be useful to remember, but is not related to core functionality of this application. */
      details?: {
        /**
         * @description a general description of a Zone 
         * @example raised bed containing assorted vegetables
         */
        description?: string;
        /**
         * @description general notes about the Zone 
         * @example near the west wall of the yard, receiving morning light and afternoon shade
         */
        notes?: string;
      };
      /**
       * @description this corresponds directly to the configuration of the `garden-controller` and is critical for having control of the Zone 
       * @example 0
       */
      position?: number;
      /**
       * @description allows manually skipping next N watering events 
       * @example 1
       */
      skip_count?: number;
      /**
       * @description list of WaterSchedules used to water this Zone 
       * @example [
       *   "9m4e2mr0ui3e8a215n4g"
       * ]
       */
      water_schedule_ids?: (components["schemas"]["xid"])[];
    };
    /** @description This allows updating/editing a Zone resource */
    UpdateZoneRequest: components["schemas"]["Zone"] & {
      /**
       * Format: date-time 
       * @description the date-time when the Zone was originally created
       */
      created_at?: string;
    };
    /** @description List of all Zones */
    AllZonesResponse: {
      zones?: (components["schemas"]["ZoneResponse"])[];
    };
    /** @description This allows creating a Zone resource */
    CreateZoneRequest: WithRequired<components["schemas"]["Zone"], "name" | "position" | "water_schedule_ids">;
    /** @description This is the response object for Zones that contains extra information only available on Zones that are created */
    ZoneResponse: WithRequired<components["schemas"]["Zone"] & {
      id?: components["schemas"]["xid"];
      /**
       * Format: date-time 
       * @description the date-time when the Zone was originally created
       */
      created_at?: string;
      /**
       * Format: date-time 
       * @description the date-time when the Zone was deleted/removed
       */
      end_date?: string;
      next_water?: components["schemas"]["NextWaterDetails"];
      /**
       * Format: date-time 
       * @description time of the next scheduled watering
       */
      next_water_time?: string;
      /**
       * Format: duration 
       * @description duration of the next scheduled watering. If WeatherControl is enabled, this will adjust for scaling based on
       * currently-available data
       *  
       * @example 10m0s
       */
      next_water_duration?: string;
      weather_data?: components["schemas"]["WeatherData"];
      /**
       * @example [
       *   {
       *     "rel": "self",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670"
       *   },
       *   {
       *     "rel": "garden",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0"
       *   },
       *   {
       *     "rel": "action",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670/action"
       *   },
       *   {
       *     "rel": "history",
       *     "href": "/gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670/history"
       *   }
       * ]
       */
      links?: (components["schemas"]["link"])[];
    }, "id" | "created_at" | "links" | "name" | "position" | "water_schedule_ids">;
    /** @description used in ZoneResponse to show detailed information about the next watering job */
    NextWaterDetails: {
      /**
       * Format: date-time 
       * @description the time when th water schedule will be next triggered
       */
      time?: string;
      /**
       * Format: duration 
       * @description the duration that watering will run for. If weather scaling is configured, current weather data will be used to calculate
       * an adjusted duration, but it may be a different value when the actual schedule executes
       */
      duration?: string;
      /** @description ID of the water_schedule that is executing next */
      water_schedule_id?: components["schemas"]["xid"];
      /**
       * @description human-readable information about upcoming watering 
       * @example skip_count 5 affected the time
       */
      message?: string;
    };
    /** @description used in ZoneResponse to show recent weather data and scaling factors */
    WeatherData: {
      /** @description recent rainfall (in millimeters) and resulting scale factor */
      rain?: {
        /**
         * Format: float 
         * @description total rainfall since last watering (in millimeters)
         */
        mm?: number;
        /**
         * Format: float 
         * @description scale factor calculated by WeatherControl setup and recent rain data
         */
        scale_factor?: number;
      };
      /** @description data about the average daily high temperatures */
      average_temperature?: {
        /**
         * Format: float 
         * @description average high daily temperatures since last watering (in degrees celsius)
         */
        celsius?: number;
        /**
         * Format: float 
         * @description scale factor calculated by WeatherControl setup and recent temperature data
         */
        scale_factor?: number;
      };
      /**
       * Format: float 
       * @description moisture percentage of a Zone with a soil moisture sensor
       */
      soil_moisture_percent?: number;
    };
    /** @description response containing a list of past watering events and some basic aggegrate details about them */
    WaterHistoryResponse: {
      history?: (components["schemas"]["WaterHistory"])[];
      /**
       * @description number of watering events found in the range 
       * @example 1
       */
      count?: number;
      /**
       * @description average of `duration` for all events found. Formatted as a float in Go duration format 
       * @example 15s
       */
      average?: string;
      /**
       * @description total of `duration` for all events found. Formatted as a float in Go duration format 
       * @example 15s
       */
      total?: string;
    };
    /** @description a */
    WaterHistory: {
      /**
       * @description amount of time, in Duration format, that Zone should be watered 
       * @example 15000ms
       */
      duration?: string;
      /**
       * Format: date-time 
       * @description time that the watering event was recorded
       */
      record_time?: string;
    };
    /** @description collects all the possible actions for a Zone into a single struct so these can easily be received as one request */
    ZoneAction: {
      water: components["schemas"]["WaterAction"];
    };
    /** @description waters a Zone for the specified amount of time */
    WaterAction: {
      /**
       * @description amount of time, in milliseconds, that Zone should be watered 
       * @example 150000
       */
      duration: number;
      /** @description if Zone is configured with a `minimum_moisture` for watering, ignore it and force watering */
      ignore_moisture?: boolean;
    };
  };
  responses: never;
  parameters: {
    /** @description ID of Garden resource for this request */
    GardenID: components["schemas"]["xid"];
    /** @description ID of Plant resource for this request */
    PlantID: components["schemas"]["xid"];
    /** @description ID of Zone resource for this request */
    ZoneID: components["schemas"]["xid"];
    /** @description ID of WaterSchedule resource for this request */
    WaterScheduleID: components["schemas"]["xid"];
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Get all Gardens 
   * @description Query for a list of all Gardens. Optionally include end-dated Gardens.
   */
  getAllGardens: {
    parameters: {
      query?: {
        /** @description whether or not to include end-dated Gardens in the response */
        end_dated?: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AllGardensResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Create a new Garden 
   * @description Create a new Garden resource.
   */
  createGarden: {
    /** @description Create a new Garden */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGardenRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["GardenResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get a Garden 
   * @description Get details of a Garden.
   */
  getGarden: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GardenResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * End-date a Garden 
   * @description End-date a Garden. This allows deleting without actually losing the resource data. Once a Garden is end-dated, certain resources will not be available such as health and action.
   */
  endDateGarden: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GardenResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Update/Edit a Garden 
   * @description Update/Edit a Garden. Only certain fields of a Garden are editable.
   */
  updateGarden: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    /** @description Update/Edit a new Garden */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGardenRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["GardenResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Execute action on a Garden 
   * @description This endpoint allows executing certain actions on a Garden. This will actually interact with the `garden-controller` rather than just manipulating resources.
   */
  gardenAction: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    /** @description Execute action on a Garden */
    requestBody: {
      content: {
        "application/json": components["schemas"]["GardenAction"];
      };
    };
    responses: {
      /** @description Accepted */
      202: never;
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get all Plants 
   * @description Query for a list of all Plants. Optionally include end-dated Plants.
   */
  getAllPlants: {
    parameters: {
      query?: {
        /** @description whether or not to include end-dated Plants in the response */
        end_dated?: boolean;
      };
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AllPlantsResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Add a Plant 
   * @description Adds a new Plant to this Garden.
   */
  addPlant: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    /** @description Add a Plant */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePlantRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["PlantResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get a Plant 
   * @description Get details of a Plant.
   */
  getPlant: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        plantID: components["parameters"]["PlantID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlantResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * End-date a Plant 
   * @description End-date a Plant. This allows deleting without actually losing the resource data. Once a Plant is end-dated, certain resources will not be available such as health and action.
   */
  endDatePlant: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        plantID: components["parameters"]["PlantID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlantResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Update/Edit a Plant 
   * @description Update/Edit a Plant. Only certain fields of a Plant are editable.
   */
  updatePlant: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        plantID: components["parameters"]["PlantID"];
      };
    };
    /** @description Update/Edit a new Plant */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePlantRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PlantResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get all Zones 
   * @description Query for a list of all Zones. Optionally include end-dated Zones.
   */
  getAllZones: {
    parameters: {
      query?: {
        /** @description whether or not to include end-dated Zones in the response */
        end_dated?: boolean;
      };
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AllZonesResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Add a Zone 
   * @description Adds a new Zone to this Garden.
   */
  addZone: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
      };
    };
    /** @description Add a Zone */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateZoneRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["ZoneResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get a Zone 
   * @description Get details of a Zone.
   */
  getZone: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        zoneID: components["parameters"]["ZoneID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ZoneResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * End-date a Zone 
   * @description End-date a Zone. This allows deleting without actually losing the resource data. Once a Zone is end-dated, certain resources will not be available such as health and action.
   */
  endDateZone: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        zoneID: components["parameters"]["ZoneID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ZoneResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Update/Edit a Zone 
   * @description Update/Edit a Zone. Only certain fields of a Zone are editable.
   */
  updateZone: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        zoneID: components["parameters"]["ZoneID"];
      };
    };
    /** @description Update/Edit a new Zone */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateZoneRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ZoneResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Execute action on a Zone 
   * @description This endpoint allows executing certain actions on a Zone. This will actually interact with the `garden-controller` rather than just manipulating resources.
   */
  zoneAction: {
    parameters: {
      path: {
        gardenID: components["parameters"]["GardenID"];
        zoneID: components["parameters"]["ZoneID"];
      };
    };
    /** @description Execute action on a Zone */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ZoneAction"];
      };
    };
    responses: {
      /** @description Accepted */
      202: never;
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get Zone's watering history 
   * @description This endpoint retrieves information about past watering events for this Zone
   */
  zoneHistory: {
    parameters: {
      query?: {
        /** @description duration describing the amount of time in the past to show events from (default=72h) */
        range?: string;
        /** @description maximum number of events to include in response (default=0/no limit) */
        limit?: number;
      };
      path: {
        gardenID: components["parameters"]["GardenID"];
        zoneID: components["parameters"]["ZoneID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WaterHistoryResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get all WaterSchedules 
   * @description Query for a list of all WaterSchedules. Optionally include end-dated WaterSchedules.
   */
  getAllWaterSchedules: {
    parameters: {
      query?: {
        /** @description whether or not to include end-dated WaterSchedules in the response */
        end_dated?: boolean;
      };
      path: {
        waterScheduleID: components["parameters"]["WaterScheduleID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AllWaterSchedulesResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Add a WaterSchedule 
   * @description Adds a new WaterSchedule.
   */
  addWaterSchedule: {
    /** @description Add a WaterSchedule */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateWaterScheduleRequest"];
      };
    };
    responses: {
      /** @description Created */
      201: {
        content: {
          "application/json": components["schemas"]["WaterScheduleResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Get a WaterSchedule 
   * @description Get details of a WaterSchedule.
   */
  getWaterSchedule: {
    parameters: {
      path: {
        waterScheduleID: components["parameters"]["WaterScheduleID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WaterScheduleResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * End-date a WaterSchedule 
   * @description End-date a WaterSchedule. This allows deleting without actually losing the resource data. Once a WaterSchedule is end-dated, certain resources will not be available such as health and action.
   */
  endDateWaterSchedule: {
    parameters: {
      path: {
        waterScheduleID: components["parameters"]["WaterScheduleID"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WaterScheduleResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
  /**
   * Update/Edit a WaterSchedule 
   * @description Update/Edit a WaterSchedule. Only certain fields of a WaterSchedule are editable.
   */
  updateWaterSchedule: {
    parameters: {
      path: {
        waterScheduleID: components["parameters"]["WaterScheduleID"];
      };
    };
    /** @description Update/Edit a new WaterSchedule */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateWaterScheduleRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WaterScheduleResponse"];
        };
      };
      /** @description Bad Request */
      400: never;
    };
  };
}
