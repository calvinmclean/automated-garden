openapi: 3.0.3
info:
  description: |-
    This is an OpenAPI Specification for https://github.com/calvinmclean/automated-garden/tree/main/garden-app

    It allows managing and interacting with Gardens, Zones and Plants for this application.

  title: Garden App - OpenAPI
  version: 1.0.0
tags:
  - name: gardens
    description: Operations related to Garden resources
  - name: plants
    description: Operations related to Plant resources
  - name: zones
    description: Operations related to Zone resources
  - name: water_schedules
    description: Operations related to WaterSchedule resources
paths:
  /gardens:
    post:
      tags:
        - gardens
      summary: Create a new Garden
      description: Create a new Garden resource.
      operationId: createGarden
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Create a new Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGardenRequest"
    get:
      tags:
        - gardens
      summary: Get all Gardens
      description: Query for a list of all Gardens. Optionally include end-dated Gardens.
      operationId: getAllGardens
      parameters:
        - $ref: "#/components/parameters/EndDated"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllGardensResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}:
    get:
      tags:
        - gardens
      summary: Get a Garden
      description: Get details of a Garden.
      operationId: getGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - gardens
      summary: Update/Edit a Garden
      description: Update/Edit a Garden. Only certain fields of a Garden are editable.
      operationId: updateGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGardenRequest"
    delete:
      tags:
        - gardens
      summary: End-date a Garden
      description: End-date a Garden. This allows deleting without actually losing the resource data. Once a Garden is end-dated, certain resources will not be available such as health and action.
      operationId: endDateGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/action:
    post:
      tags:
        - gardens
      summary: Execute action on a Garden
      description: This endpoint allows executing certain actions on a Garden. This will actually interact with the `garden-controller` rather than just manipulating resources.
      operationId: gardenAction
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      requestBody:
        description: Execute action on a Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GardenAction"
  /gardens/{gardenID}/plants:
    post:
      tags:
        - plants
      summary: Add a Plant
      description: Adds a new Plant to this Garden.
      operationId: addPlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Add a Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlantRequest"
    get:
      tags:
        - plants
      summary: Get all Plants
      description: Query for a list of all Plants. Optionally include end-dated Plants.
      operationId: getAllPlants
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/EndDated"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllPlantsResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/plants/{plantID}:
    get:
      tags:
        - plants
      summary: Get a Plant
      description: Get details of a Plant.
      operationId: getPlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - plants
      summary: Update/Edit a Plant
      description: Update/Edit a Plant. Only certain fields of a Plant are editable.
      operationId: updatePlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlantRequest"
    delete:
      tags:
        - plants
      summary: End-date a Plant
      description: End-date a Plant. This allows deleting without actually losing the resource data. Once a Plant is end-dated, certain resources will not be available such as health and action.
      operationId: endDatePlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request

  /gardens/{gardenID}/zones:
    post:
      tags:
        - zones
      summary: Add a Zone
      description: Adds a new Zone to this Garden.
      operationId: addZone
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Add a Zone
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateZoneRequest"
    get:
      tags:
        - zones
      summary: Get all Zones
      description: Query for a list of all Zones. Optionally include end-dated Zones.
      operationId: getAllZones
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/EndDated"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllZonesResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/zones/{zoneID}:
    get:
      tags:
        - zones
      summary: Get a Zone
      description: Get details of a Zone.
      operationId: getZone
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ZoneID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - zones
      summary: Update/Edit a Zone
      description: Update/Edit a Zone. Only certain fields of a Zone are editable.
      operationId: updateZone
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ZoneID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Zone
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateZoneRequest"
    delete:
      tags:
        - zones
      summary: End-date a Zone
      description: End-date a Zone. This allows deleting without actually losing the resource data. Once a Zone is end-dated, certain resources will not be available such as health and action.
      operationId: endDateZone
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ZoneID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ZoneResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/zones/{zoneID}/action:
    post:
      tags:
        - zones
      summary: Execute action on a Zone
      description: This endpoint allows executing certain actions on a Zone. This will actually interact with the `garden-controller` rather than just manipulating resources.
      operationId: zoneAction
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ZoneID"
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      requestBody:
        description: Execute action on a Zone
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ZoneAction"

  /gardens/{gardenID}/zones/{zoneID}/history:
    get:
      tags:
        - zones
      summary: Get Zone's watering history
      description: This endpoint retrieves information about past watering events for this Zone
      operationId: zoneHistory
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/ZoneID"
        - name: range
          in: query
          description: duration describing the amount of time in the past to show events from (default=72h)
          required: false
          schema:
            type: string
            example: 72h
        - name: limit
          in: query
          description: maximum number of events to include in response (default=0/no limit)
          required: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterHistoryResponse"
        "400":
          description: Bad Request

  /water_schedules:
    post:
      tags:
        - water_schedules
      summary: Add a WaterSchedule
      description: Adds a new WaterSchedule.
      operationId: addWaterSchedule
      parameters:
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterScheduleResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Add a WaterSchedule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWaterScheduleRequest"
    get:
      tags:
        - water_schedules
      summary: Get all WaterSchedules
      description: Query for a list of all WaterSchedules. Optionally include end-dated WaterSchedules.
      operationId: getAllWaterSchedules
      parameters:
        - $ref: "#/components/parameters/EndDated"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllWaterSchedulesResponse"
        "400":
          description: Bad Request
  /water_schedules/{waterScheduleID}:
    get:
      tags:
        - water_schedules
      summary: Get a WaterSchedule
      description: Get details of a WaterSchedule.
      operationId: getWaterSchedule
      parameters:
        - $ref: "#/components/parameters/WaterScheduleID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterScheduleResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - water_schedules
      summary: Update/Edit a WaterSchedule
      description: Update/Edit a WaterSchedule. Only certain fields of a WaterSchedule are editable.
      operationId: updateWaterSchedule
      parameters:
        - $ref: "#/components/parameters/WaterScheduleID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterScheduleResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new WaterSchedule
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateWaterScheduleRequest"
    delete:
      tags:
        - water_schedules
      summary: End-date a WaterSchedule
      description: End-date a WaterSchedule. This allows deleting without actually losing the resource data. Once a WaterSchedule is end-dated, certain resources will not be available such as health and action.
      operationId: endDateWaterSchedule
      parameters:
        - $ref: "#/components/parameters/WaterScheduleID"
        - $ref: "#/components/parameters/ExcludeWeatherData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterScheduleResponse"
        "400":
          description: Bad Request

components:
  parameters:
    GardenID:
      name: gardenID
      in: path
      description: ID of Garden resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"
    PlantID:
      name: plantID
      in: path
      description: ID of Plant resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"
    ZoneID:
      name: zoneID
      in: path
      description: ID of Zone resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"
    WaterScheduleID:
      name: waterScheduleID
      in: path
      description: ID of WaterSchedule resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"
    EndDated:
      name: end_dated
      in: query
      description: whether or not to include end-dated resources in the response
      required: false
      schema:
        type: boolean
    ExcludeWeatherData:
      name: exclude_weather_data
      in: query
      description: whether or not to include weather data in responses. Setting to false is useful for getting faster responses since loading weather data can be slow
      required: false
      schema:
        type: boolean

  schemas:
    xid:
      type: string
      description: 20 character unique identifier used throughout this API
      externalDocs:
        url: https://github.com/rs/xid
      pattern: "[0-9a-v]{20}"
      example: 9m4e2mr0ui3e8a215n4g

    link:
      type: object
      description: used for JSON Hypermedia to link to additional resources
      properties:
        ref:
          type: string
          description: one-word explanation of what this link is for
        href:
          type: string
          description: relative path for the specified resource

    UpdatePlantRequest:
      type: object
      description: This allows updating/editing a Plant resource
      allOf:
        - $ref: "#/components/schemas/Plant"
        - properties:
            created_at:
              type: string
              format: date-time
              description: the date-time when the Plant was originally created

    AllPlantsResponse:
      type: object
      description: List of all Plants
      properties:
        plants:
          type: array
          items:
            $ref: "#/components/schemas/PlantResponse"

    CreatePlantRequest:
      type: object
      description: This allows creating a Plant resource
      allOf:
        - $ref: "#/components/schemas/Plant"
      required:
        - name
        - zone_id

    PlantResponse:
      type: object
      description: This is the response object for Plants that contains extra information only available on Plants that are created
      allOf:
        - $ref: "#/components/schemas/Plant"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            created_at:
              type: string
              format: date-time
              description: the date-time when the Plant was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Plant was deleted/removed
            next_water_time:
              type: string
              description: time of the next scheduled watering
              format: date-time
            moisture:
              type: number
              format: float
              description: moisture percentage of a Plant with a soil moisture sensor
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /gardens/c22tmvucie6n6gdrpal0/zones/c22tmvucie6n6gdrpal0/plants/c3ucvu06n88pt1dom670
                - rel: garden
                  href: /gardens/c22tmvucie6n6gdrpal0
                - rel: zone
                  href: /gardens/c22tmvucie6n6gdrpal0/zones/c22tmvucie6n6gdrpal0
      required:
        - id
        - created_at
        - links
        - name

    Plant:
      type: object
      description: |
        This represents a single Plant, or more generally a "watered resource," attached to the `garden-controller`.
        It has a `plant_position` field to inform the `garden-controller` of which pump or valve to control for watering.
      properties:
        name:
          type: string
          description: this is the name of the Plant
          example: lettuce
        zone_id:
          type: object
          description: ID referencing the Zone that this Plant is a part of
          allOf:
            - $ref: "#/components/schemas/xid"
        details:
          type: object
          description: this holds various additional information about a Plant that might be useful to remember, but is not related to core functionality of this application.
          properties:
            description:
              type: string
              description: a general description of a Plant
              example: nutritious leafy green
            notes:
              type: string
              description: general notes about the Plant
              example: grown from seed and planted about 6 inches apart
            time_to_harvest:
              type: string
              description: estimate of time it takes Plant to grow
              example: 70 days
            count:
              type: integer
              description: number of actual plants that would be managed
              example: 6

    GardenHealth:
      type: object
      description: information about the Garden controller's health status
      properties:
        status:
          type: string
          description: current status of a Garden
          enum: [UP, DOWN, N/A]
        details:
          type: string
          description: additional details about the Garden's health. May contain error details if health status was unavailable
        last_contact:
          type: string
          format: date-time
          description: the last time the Garden reported its status

    GardenAction:
      type: object
      description: collects all the possible actions for a Garden into a single struct so these can easily be received as one request
      properties:
        light:
          $ref: "#/components/schemas/LightAction"
        stop:
          $ref: "#/components/schemas/StopAction"

    LightAction:
      type: object
      description: turn a Garden's light on or off. If left blank or empty, it will toggle the current state
      properties:
        state:
          $ref: "#/components/schemas/LightState"
        for_duration:
          type: string
          format: duration
          description: duration string to determine how long to delay turning the light on. Only allowed to be used with state=OFF
          example: 14h

    StopAction:
      type: object
      description: instruct a Garden to stop watering
      properties:
        all:
          type: boolean
          description: whether or not the Garden's watering queue should be cleared in addition to stopping current watering

    LightState:
      type: string
      enum: [ON, OFF, ""]
      description: state that will be set by the next action

    CreateGardenRequest:
      type: object
      description: This allows creating a Garden resource
      allOf:
        - $ref: "#/components/schemas/Garden"
      required:
        - name

    UpdateGardenRequest:
      type: object
      description: This allows updating/editing a Garden resource
      allOf:
        - $ref: "#/components/schemas/Garden"
        - properties:
            created_at:
              type: string
              format: date-time
              description: the date-time when the Garden was originally created

    GardenResponse:
      type: object
      description: This is the response object for Gardens that contains extra information only available on Gardens that are created
      allOf:
        - $ref: "#/components/schemas/Garden"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            created_at:
              type: string
              format: date-time
              description: the date-time when the Garden was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Garden was deleted/removed
            next_light_action:
              type: object
              description: time and state for the next scheduled LightAction
              properties:
                time:
                  type: string
                  format: date-time
                  description: date-time of the next action
                state:
                  $ref: "#/components/schemas/LightState"
            health:
              $ref: "#/components/schemas/GardenHealth"
            temperature_humidity_data:
              type: object
              description: recent temperature and humidity from the garden-controller
              properties:
                temperature_celsius:
                  type: number
                  format: float
                  description: temperature in degrees Celsius
                humidity_percentage:
                  type: number
                  format: float
                  description: relative humidity percentage
            num_plants:
              type: integer
              description: the number of active (not end-dated) Plants in this Garden
              example: 1
              minimum: 0
            num_zones:
              type: integer
              description: the number of active (not end-dated) Zones in this Garden
              example: 1
              minimum: 0
            plants:
              description: link specifically for the collection of Plants
              allOf:
                - $ref: "#/components/schemas/link"
              example:
                rel: collection
                href: /gardens/c6corm5mk1u53v1dchq0/plants
            zones:
              description: link specifically for the collection of Zones
              allOf:
                - $ref: "#/components/schemas/link"
              example:
                rel: collection
                href: /gardens/c6corm5mk1u53v1dchq0/zones
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /gardens/c6corm5mk1u53v1dchq0
                - rel: health
                  href: /gardens/c6corm5mk1u53v1dchq0/health
                - rel: plants
                  href: /gardens/c6corm5mk1u53v1dchq0/plants
                - rel: zones
                  href: /gardens/c6corm5mk1u53v1dchq0/zones
                - rel: action
                  href: /gardens/c6corm5mk1u53v1dchq0/action
      required:
        - id
        - created_at
        - plants
        - zones
        - links

    AllGardensResponse:
      type: object
      description: List of all Gardens
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/GardenResponse"

    Garden:
      type: object
      description: A Garden corresponds to a `garden-controller` in the real-world and contains all the necessary information for interacting with it
      properties:
        name:
          type: string
          description: A descriptive name for the Garden
          example: Garden
        topic_prefix:
          type: string
          description: |
            This is the prefix of the MQTT topic for sending messages to the controller, so it is recommended to avoid spaces and the following characters are not allowed: `[$#*>+/]`
          example: garden
        max_zones:
          type: integer
          description: used to help with validation and avoid errors. This represents the maximum number of Zones that this Garden is able to water
          example: 3
          minimum: 0
        light_schedule:
          type: object
          description: describes when to turn on a light and for how long to leave it on
          properties:
            duration:
              type: string
              format: duration
              description: duration string to determine how long to leave a light on
              example: 14h
            start_time:
              type: string
              format: time
              description: time that the light should be turned on
              example: 23:00:00-07:00
            adhoc_on_time:
              type: string
              format: date-time
              description: if a light delay was used, this persists the time that the light needs to turn back on
          temperature_humidity_sensor:
            type: boolean
            description: determines if the garden-controller has a DHT22 sensor configured
          required:
            - duration
            - start_time
      required:
        - max_zones

    WaterSchedule:
      type: object
      description: |
        Allows control over how/when the Zone is watered. The `interval` is used to control the amount of time the pump runs to water the Garden.
        Specifying a `minimum_moisture` will instruct the server to consider moisture sensor data when executing the WaterAction.
        To avoid falsely triggering watering and avoid the complexity if constantly checking moisture data, the moisture is only checked when executing a WaterAction.
      properties:
        duration:
          type: string
          description: amount of time, in Duration format, that Plant should be watered
          example: 15000ms
        interval:
          type: string
          format: duration
          description: amount of time, as a Duration string, to wait between scheduled watering
          example: 72h
        start_time:
          type: string
          format: time
          description: time that the watering interval should be started at
          example: 23:00:00-07:00
        weather_control:
          $ref: "#/components/schemas/WeatherControl"
          description: control watering based on weather data. Requires a configured weather client
        name:
          type: string
          description: optional name for the WaterSchedule
        description:
          type: string
          description: optional description for the WaterSchedule
      required:
        - duration
        - interval
        - start_time

    UpdateWaterScheduleRequest:
      type: object
      description: This allows updating/editing a WaterSchedule resource
      allOf:
        - $ref: "#/components/schemas/WaterSchedule"

    AllWaterSchedulesResponse:
      type: object
      description: List of all WaterSchedules
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/WaterScheduleResponse"

    CreateWaterScheduleRequest:
      type: object
      description: This allows creating a WaterSchedule resource
      allOf:
        - $ref: "#/components/schemas/WaterSchedule"
      required:
        - duration
        - interval
        - start_time

    WaterScheduleResponse:
      type: object
      description: This is the response object for WaterSchedules that contains extra information only available on WaterSchedules that are created
      allOf:
        - $ref: "#/components/schemas/WaterSchedule"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            end_date:
              type: string
              format: date-time
              description: the date-time when the WaterSchedule was deleted/removed
            next_water:
              $ref: "#/components/schemas/NextWaterDetails"
            weather_data:
              $ref: "#/components/schemas/WeatherData"
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /water_schedules/c22tmvucie6n6gdrpal0
      required:
        - id
        - links

    WeatherControl:
      type: object
      properties:
        rain_control:
          $ref: "#/components/schemas/ScaleControl"
          description: |
            scale watering based on total rainfall between now and the last scheduled watering
            time (even if watering was skipped at the last scheduled time). This uses an "inverted scale"
            so higher input values cause scaling < 1. Also it will only scale in this direction. Values
            are in millimeters. The example configuration will scale to zero if rainfall >= 25.4mm (1 in)
          example:
            baseline_value: 0
            factor: 1
            range: 25.4
        temperature_control:
          $ref: "#/components/schemas/ScaleControl"
          description: |
            scale watering based on recent average high temeperatures. Values are in degrees Celsius. With
            the example configuration, an average high of 18C will result in scaling factor of 0.55
          example:
            baseline_value: 27
            factor: 0.5
            range: 10
        moisture_control:
          type: object
          description: skip watering based on temperature measurements
          properties:
            minimum_moisture:
              type: integer
              minimum: 0
              maximum: 100
              description: |
                this is a percentage representing the threshold that the Plant's moisture must be
                below to enable a WaterAction
              example: 50

    ScaleControl:
      type: object
      description: |
        ScaleControl is a generic type that allows for a flexible configuration to
        control scaling of watering duration based on external factors.
      properties:
        baseline_value:
          type: number
          format: float
          description: this is the value where scaling starts from
        factor:
          type: number
          format: float
          minimum: 0
          maximum: 0
          description: |
            maximum amount that this will scale by. The value must be between 0 and 1,
            where 0 is no scaling and 1 scale by the full proportion of the range
        range:
          type: number
          format: float
          description: |
            the most extreme value (when added to baseline_value) that scaling will be 
            affected by (used as max/min)

    Zone:
      type: object
      description: |
        A Zone corresponds to a "waterable resource" and enabled direct control of `garden-controller` watering devices.
        It holds a WaterSchedule and can be referenced by Plants to track their watering and location. This allows watering
        multiple Plants from a single control and is useful for larger Garden setups, such as an outdoor Garden with beds.
      properties:
        name:
          type: string
          description: this is the name of the Zone
          example: Raised Bed 1
        details:
          type: object
          description: this holds various additional information about a Zone that might be useful to remember, but is not related to core functionality of this application.
          properties:
            description:
              type: string
              description: a general description of a Zone
              example: raised bed containing assorted vegetables
            notes:
              type: string
              description: general notes about the Zone
              example: near the west wall of the yard, receiving morning light and afternoon shade
        position:
          type: integer
          description: this corresponds directly to the configuration of the `garden-controller` and is critical for having control of the Zone
          example: 0
          minimum: 0
        skip_count:
          type: integer
          description: allows manually skipping next N watering events
          example: 1
          minimum: 0
        water_schedule_ids:
          type: array
          items:
            $ref: "#/components/schemas/xid"
          description: list of WaterSchedules used to water this Zone
          example: ["9m4e2mr0ui3e8a215n4g"]

    UpdateZoneRequest:
      type: object
      description: This allows updating/editing a Zone resource
      allOf:
        - $ref: "#/components/schemas/Zone"
        - properties:
            created_at:
              type: string
              format: date-time
              description: the date-time when the Zone was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Zone was deleted/removed

    AllZonesResponse:
      type: object
      description: List of all Zones
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ZoneResponse"

    CreateZoneRequest:
      type: object
      description: This allows creating a Zone resource
      allOf:
        - $ref: "#/components/schemas/Zone"
      required:
        - name
        - position
        - water_schedule_ids

    ZoneResponse:
      type: object
      description: This is the response object for Zones that contains extra information only available on Zones that are created
      allOf:
        - $ref: "#/components/schemas/Zone"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            created_at:
              type: string
              format: date-time
              description: the date-time when the Zone was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Zone was deleted/removed
            next_water:
              $ref: "#/components/schemas/NextWaterDetails"
            weather_data:
              $ref: "#/components/schemas/WeatherData"
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670
                - rel: garden
                  href: /gardens/c22tmvucie6n6gdrpal0
                - rel: action
                  href: /gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670/action
                - rel: history
                  href: /gardens/c22tmvucie6n6gdrpal0/zones/c3ucvu06n88pt1dom670/history
      required:
        - id
        - created_at
        - links
        - name
        - position
        - water_schedule_ids

    NextWaterDetails:
      type: object
      description: used in ZoneResponse to show detailed information about the next watering job
      properties:
        time:
          type: string
          format: date-time
          description: the time when th water schedule will be next triggered
        duration:
          type: string
          format: duration
          description: |
            the duration that watering will run for. If weather scaling is configured, current weather data will be used to calculate
            an adjusted duration, but it may be a different value when the actual schedule executes
        water_schedule_id:
          $ref: "#/components/schemas/xid"
          description: ID of the water_schedule that is executing next
        message:
          type: string
          description: human-readable information about upcoming watering
          example: skip_count 5 affected the time

    WeatherData:
      type: object
      description: used in ZoneResponse to show recent weather data and scaling factors
      properties:
        rain:
          type: object
          description: recent rainfall (in millimeters) and resulting scale factor
          properties:
            mm:
              type: number
              format: float
              description: total rainfall since last watering (in millimeters)
            scale_factor:
              type: number
              format: float
              description: scale factor calculated by WeatherControl setup and recent rain data
        average_temperature:
          type: object
          description: data about the average daily high temperatures
          properties:
            celsius:
              type: number
              format: float
              description: average high daily temperatures since last watering (in degrees celsius)
            scale_factor:
              type: number
              format: float
              description: scale factor calculated by WeatherControl setup and recent temperature data
        soil_moisture_percent:
          type: number
          format: float
          description: moisture percentage of a Zone with a soil moisture sensor

    WaterHistoryResponse:
      type: object
      description: response containing a list of past watering events and some basic aggegrate details about them
      properties:
        history:
          type: array
          items:
            $ref: "#/components/schemas/WaterHistory"
        count:
          type: integer
          description: number of watering events found in the range
          example: 1
        average:
          type: string
          description: average of `duration` for all events found. Formatted as a float in Go duration format
          example: 15s
        total:
          type: string
          description: total of `duration` for all events found. Formatted as a float in Go duration format
          example: 15s

    WaterHistory:
      type: object
      description: a
      properties:
        duration:
          type: string
          description: amount of time, in Duration format, that Zone should be watered
          example: 15000ms
        record_time:
          type: string
          format: date-time
          description: time that the watering event was recorded

    ZoneAction:
      type: object
      description: collects all the possible actions for a Zone into a single struct so these can easily be received as one request
      properties:
        water:
          $ref: "#/components/schemas/WaterAction"
      required:
        - water

    WaterAction:
      type: object
      description: waters a Zone for the specified amount of time
      properties:
        duration:
          type: string
          description: amount of time, as duration string, that Zone should be watered
          example: 15m
        ignore_moisture:
          type: boolean
          description: if Zone is configured with a `minimum_moisture` for watering, ignore it and force watering
      required:
        - duration
