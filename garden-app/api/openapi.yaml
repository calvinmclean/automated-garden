openapi: 3.0.3
info:
  description: |-
    This is an OpenAPI Specification for https://github.com/calvinmclean/automated-garden/tree/main/garden-app

    It allows managing and interacting with Gardens and Plants for this application.

  title: Garden App - OpenAPI
  version: 1.0.0
tags:
  - name: gardens
    description: Operations related to Garden resources
  - name: plants
    description: Operations related to Plant resources
  - name: backwards-compatible plants
    description: |
      Operations related to Plant resources that can be accessed without a Garden ID.
      This preserves compatibility for before Gardens were added.
paths:
  /gardens:
    post:
      tags:
        - gardens
      summary: Create a new Garden
      description: Create a new Garden resource.
      operationId: createGarden
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Create a new Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGardenRequest"
    get:
      tags:
        - gardens
      summary: Get all Gardens
      description: Query for a list of all Gardens. Optionally include end-dated Gardens.
      operationId: getAllGardens
      parameters:
        - name: end_dated
          in: query
          description: whether or not to include end-dated Gardens in the response
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllGardensResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}:
    get:
      tags:
        - gardens
      summary: Get a Garden
      description: Get details of a Garden.
      operationId: getGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - gardens
      summary: Update/Edit a Garden
      description: Update/Edit a Garden. Only certain fields of a Garden are editable.
      operationId: updateGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateGardenRequest"
    delete:
      tags:
        - gardens
      summary: End-date a Garden
      description: End-date a Garden. This allows deleting without actually losing the resource data. Once a Garden is end-dated, certain resources will not be available such as health and action.
      operationId: endDateGarden
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/action:
    post:
      tags:
        - gardens
      summary: Execute action on a Garden
      description: This endpoint allows executing certain actions on a Garden. This will actually interact with the `garden-controller` rather than just manipulating resources.
      operationId: gardenAction
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      requestBody:
        description: Execute action on a Garden
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GardenAction"
  /gardens/{gardenID}/health:
    get:
      tags:
        - gardens
      summary: Get Garden health
      description: |
        This allows getting information about a Garden's health status.
        The `garden-controller` periodically reports that it is up by publishing to MQTT which writes a data point in InfluxDB via Telegraf.
        A Garden is considered "UP" if it has reported within the last 5 minutes.
      operationId: getGardenHealth
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GardenHealth"
              examples:
                UP:
                  value:
                    status: UP
                    last_contact: "2021-11-21T02:13:53.539Z"
                DOWN:
                  value:
                    status: DOWN
                    details: last contact from Garden was 4h ago
                    last_contact: "2021-11-21T02:13:53.539Z"
                DOWN (no contact):
                  value:
                    status: DOWN
                    details: no last contact time available
                    last_contact: "2021-11-21T02:13:53.539Z"
                N/A:
                  value:
                    status: N/A
                    details: error connecting to InfluxDB
        "400":
          description: Bad Request
  /gardens/{gardenID}/plants:
    post:
      tags:
        - plants
      summary: Add a Plant
      description: Adds a new Plant to this Garden.
      operationId: addPlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Add a Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePlantRequest"
    get:
      tags:
        - plants
      summary: Get all Plants
      description: Query for a list of all Plants. Optionally include end-dated Plants.
      operationId: getAllPlants
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - name: end_dated
          in: query
          description: whether or not to include end-dated Plants in the response
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllPlantsResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/plants/{plantID}:
    get:
      tags:
        - plants
      summary: Get a Plant
      description: Get details of a Plant.
      operationId: getPlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - plants
      summary: Update/Edit a Plant
      description: Update/Edit a Plant. Only certain fields of a Plant are editable.
      operationId: updatePlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlantRequest"
    delete:
      tags:
        - plants
      summary: End-date a Plant
      description: End-date a Plant. This allows deleting without actually losing the resource data. Once a Plant is end-dated, certain resources will not be available such as health and action.
      operationId: endDatePlant
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
  /gardens/{gardenID}/plants/{plantID}/action:
    post:
      tags:
        - plants
      summary: Execute action on a Plant
      description: This endpoint allows executing certain actions on a Plant. This will actually interact with the `garden-controller` rather than just manipulating resources.
      operationId: plantAction
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      requestBody:
        description: Execute action on a Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlantAction"

  /gardens/{gardenID}/plants/{plantID}/history:
    post:
      tags:
        - plants
      summary: Get Plant's watering history
      description: This endpoint retrieves information about past watering events for this Plant
      operationId: plantHistory
      parameters:
        - $ref: "#/components/parameters/GardenID"
        - $ref: "#/components/parameters/PlantID"
        - name: range
          in: query
          description: duration describing the amount of time in the past to show events from (default=72h)
          required: false
          schema:
            type: string
            example: 72h
        - name: limit
          in: query
          description: maximum number of events to include in response (default=5)
          required: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantHistoryResponse"
        "400":
          description: Bad Request

  /plants:
    get:
      tags:
        - backwards-compatible plants
      summary: Get all Plants
      description: Query for a list of all Plants. Optionally include end-dated Plants.
      operationId: getAllPlantsBackwardsCompatible
      parameters:
        - name: end_dated
          in: query
          description: whether or not to include end-dated Plants in the response
          required: false
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllPlantsResponse"
        "400":
          description: Bad Request
  /plants/{plantID}:
    get:
      tags:
        - backwards-compatible plants
      summary: Get a Plant
      description: Get details of a Plant.
      operationId: getPlantBackwardsCompatible
      parameters:
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
    patch:
      tags:
        - backwards-compatible plants
      summary: Update/Edit a Plant
      description: Update/Edit a Plant. Only certain fields of a Plant are editable.
      operationId: updatePlantBackwardsCompatible
      parameters:
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
      requestBody:
        description: Update/Edit a new Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePlantRequest"
    delete:
      tags:
        - backwards-compatible plants
      summary: End-date a Plant
      description: End-date a Plant. This allows deleting without actually losing the resource data. Once a Plant is end-dated, certain resources will not be available such as health and action.
      operationId: endDatePlantBackwardsCompatible
      parameters:
        - $ref: "#/components/parameters/PlantID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantResponse"
        "400":
          description: Bad Request
  /plants/{plantID}/action:
    post:
      tags:
        - backwards-compatible plants
      summary: Execute action on a Plant
      description: This endpoint allows executing certain actions on a Plant. This will actually interact with the `garden-controller` rather than just manipulating resources.
      operationId: plantActionBackwardsCompatible
      parameters:
        - $ref: "#/components/parameters/PlantID"
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
      requestBody:
        description: Execute action on a Plant
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlantAction"

  /plants/{plantID}/history:
    post:
      tags:
        - backwards-compatible plants
      summary: Get Plant's watering history
      description: This endpoint retrieves information about past watering events for this Plant
      operationId: plantHistoryBackwardsCompatible
      parameters:
        - $ref: "#/components/parameters/PlantID"
        - name: range
          in: query
          description: duration describing the amount of time in the past to show events from (default=72h)
          required: false
          schema:
            type: string
            example: 72h
        - name: limit
          in: query
          description: maximum number of events to include in response (default=5)
          required: false
          schema:
            type: integer
            example: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlantHistoryResponse"
        "400":
          description: Bad Request

components:
  parameters:
    GardenID:
      name: gardenID
      in: path
      description: ID of Garden resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"
    PlantID:
      name: plantID
      in: path
      description: ID of Plant resource for this request
      required: true
      schema:
        $ref: "#/components/schemas/xid"

  schemas:
    xid:
      type: string
      description: 20 character unique identifier used throughout this API
      externalDocs:
        url: https://github.com/rs/xid
      pattern: "[0-9a-v]{20}"
      example: 9m4e2mr0ui3e8a215n4g

    link:
      type: object
      description: used for JSON Hypermedia to link to additional resources
      properties:
        ref:
          type: string
          description: one-word explanation of what this link is for
        href:
          type: string
          description: relative path for the specified resource

    PlantHistoryResponse:
      type: object
      description: response containing a list of past watering events and some basic aggegrate details about them
      properties:
        history:
          type: array
          items:
            $ref: "#/components/schemas/PlantHistory"
        count:
          type: integer
          description: number of watering events found in the range
          example: 1
        average:
          type: string
          description: average of `duration` for all events found. Formatted as a float in Go duration format
          example: 15s
        total:
          type: string
          description: total of `duration` for all events found. Formatted as a float in Go duration format
          example: 15s

    PlantHistory:
      type: object
      description: a
      properties:
        duration:
          type: string
          description: amount of time, in Duration format, that Plant should be watered
          example: 15000ms
        record_time:
          type: string
          format: date-time
          description: time that the watering event was recorded

    PlantAction:
      type: object
      description: collects all the possible actions for a Plant into a single struct so these can easily be received as one request
      properties:
        water:
          $ref: "#/components/schemas/WaterAction"
      required:
        - water

    WaterAction:
      type: object
      description: waters a Plant for the specified amount of time
      properties:
        duration:
          type: number
          description: amount of time, in milliseconds, that Plant should be watered
          example: 150000
        ignore_moisture:
          type: boolean
          description: if Plant is configured with a `minimum_moisture` for watering, ignore it and force watering
      required:
        - duration

    UpdatePlantRequest:
      type: object
      description: This allows updating/editing a Plant resource
      allOf:
        - $ref: "#/components/schemas/Plant"
        - properties:
            created_at:
              type: string
              format: date-time
              description: the date-time when the Plant was originally created

    AllPlantsResponse:
      type: object
      description: List of all Plants
      properties:
        plants:
          type: array
          items:
            $ref: "#/components/schemas/PlantResponse"

    CreatePlantRequest:
      type: object
      description: This allows creating a Plant resource
      allOf:
        - $ref: "#/components/schemas/Plant"
      required:
        - name
        - plant_position
        - water_schedule

    PlantResponse:
      type: object
      description: This is the response object for Plants that contains extra information only available on Plants that are created
      allOf:
        - $ref: "#/components/schemas/Plant"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            garden_id:
              description: ID of the Garden this Plant is managed by
              allOf:
                - $ref: "#/components/schemas/xid"
            created_at:
              type: string
              format: date-time
              description: the date-time when the Plant was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Plant was deleted/removed
            next_watering_time:
              type: string
              description: time of the next scheduled watering
              format: date-time
            moisture:
              type: number
              format: float
              description: moisture percentage of a Plant with a soil moisture sensor
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /gardens/c22tmvucie6n6gdrpal0/plants/c3ucvu06n88pt1dom670
                - rel: garden
                  href: /gardens/c22tmvucie6n6gdrpal0
                - rel: action
                  href: /gardens/c22tmvucie6n6gdrpal0/plants/c3ucvu06n88pt1dom670/action
                - rel: history
                  href: /gardens/c22tmvucie6n6gdrpal0/plants/c3ucvu06n88pt1dom670/history
      required:
        - id
        - created_at
        - links
        - garden_id
        - name
        - plant_position
        - water_schedule

    Plant:
      type: object
      description: |
        This represents a single Plant, or more generally a "watered resource," attached to the `garden-controller`.
        It has a `plant_position` field to inform the `garden-controller` of which pump or valve to control for watering.
      properties:
        name:
          type: string
          description: this is the name of the Plant
          example: lettuce
        details:
          type: object
          description: this holds various additional information about a Plant that might be useful to remember, but is not related to core functionality of this application.
          properties:
            description:
              type: string
              description: a general description of a Plant
              example: nutritious leafy green
            notes:
              type: string
              description: general notes about the Plant
              example: grown from seed and planted about 6 inches apart
            time_to_harvest:
              type: string
              description: estimate of time it takes Plant to grow
              example: 70 days
            count:
              type: integer
              description: number of actual plants that would be managed
              example: 6
        plant_position:
          type: integer
          description: this is the position of this Plant in the Garden. It corresponds directly to the configuration of the `garden-controller` and is critical for watering the Plant
          example: 0
          minimum: 0
        water_schedule:
          type: object
          description: |
            Allows control over how/when the Plant is watered. The `interval` is used to control the amount of time the pump runs to water the Garden.
            Specifying a `minimum_moisture` will instruct the server to consider moisture sensor data when executing the WaterAction.
            To avoid falsely triggering watering and avoid the complexity if constantly checking moisture data, the moisture is only checked when executing a WaterAction.
          properties:
            duration:
              type: string
              description: amount of time, in Duration format, that Plant should be watered
              example: 15000ms
            interval:
              type: string
              format: duration
              description: amount of time, as a Duration string, to wait between scheduled watering
              example: 72h
            minimum_moisture:
              type: integer
              minimum: 0
              maximum: 100
              description: this is a percentage representing the threshold that the Plant's moisture must be below to enable a WaterAction
              example: 50
            start_time:
              type: string
              format: date-time
              description: time that the watering interval should be started at
          required:
            - duration
            - interval
            - start_time

    GardenHealth:
      type: object
      description: information about the Garden controller's health status
      properties:
        status:
          type: string
          description: current status of a Garden
          enum: [UP, DOWN, N/A]
        details:
          type: string
          description: additional details about the Garden's health. May contain error details if health status was unavailable
        last_contact:
          type: string
          format: date-time
          description: the last time the Garden reported its status

    GardenAction:
      type: object
      description: collects all the possible actions for a Garden into a single struct so these can easily be received as one request
      properties:
        light:
          $ref: "#/components/schemas/LightAction"
        stop:
          $ref: "#/components/schemas/StopAction"

    LightAction:
      type: object
      description: turn a Garden's light on or off. If left blank or empty, it will toggle the current state
      properties:
        state:
          $ref: "#/components/schemas/LightState"
        for_duration:
          type: string
          format: duration
          description: duration string to determine how long to delay turning the light on. Only allowed to be used with state=OFF
          example: 14h

    StopAction:
      type: object
      description: instruct a Garden to stop watering
      properties:
        all:
          type: boolean
          description: whether or not the Garden's watering queue should be cleared in addition to stopping current watering

    LightState:
      type: string
      enum: [ON, OFF]
      description: state that will be set by the next action

    CreateGardenRequest:
      type: object
      description: This allows creating a Garden resource
      allOf:
        - $ref: "#/components/schemas/Garden"
      required:
        - name

    UpdateGardenRequest:
      type: object
      description: This allows updating/editing a Garden resource
      allOf:
        - $ref: "#/components/schemas/Garden"
        - properties:
            created_at:
              type: string
              format: date-time
              description: the date-time when the Garden was originally created

    GardenResponse:
      type: object
      description: This is the response object for Gardens that contains extra information only available on Gardens that are created
      allOf:
        - $ref: "#/components/schemas/Garden"
        - properties:
            id:
              $ref: "#/components/schemas/xid"
            created_at:
              type: string
              format: date-time
              description: the date-time when the Garden was originally created
            end_date:
              type: string
              format: date-time
              description: the date-time when the Garden was deleted/removed
            next_light_action:
              type: object
              description: time and state for the next scheduled LightAction
              properties:
                time:
                  type: string
                  format: date-time
                  description: date-time of the next action
                state:
                  $ref: "#/components/schemas/LightState"
            num_plants:
              type: integer
              description: the number of active (not end-dated) Plants in this Garden
              example: 1
              minimum: 0
            plants:
              description: link specifically for the collection of Plants
              allOf:
                - $ref: "#/components/schemas/link"
              example:
                rel: collection
                href: /gardens/c6corm5mk1u53v1dchq0/plants
            links:
              type: array
              items:
                $ref: "#/components/schemas/link"
              example:
                - rel: self
                  href: /gardens/c6corm5mk1u53v1dchq0
                - rel: health
                  href: /gardens/c6corm5mk1u53v1dchq0/health
                - rel: plants
                  href: /gardens/c6corm5mk1u53v1dchq0/plants
                - rel: action
                  href: /gardens/c6corm5mk1u53v1dchq0/action
      required:
        - id
        - created_at
        - plants
        - links

    AllGardensResponse:
      type: object
      description: List of all Gardens
      properties:
        gardens:
          type: array
          items:
            $ref: "#/components/schemas/GardenResponse"

    Garden:
      type: object
      description: A Garden corresponds to a `garden-controller` in the real-world and contains all the necessary information for interacting with it
      properties:
        name:
          type: string
          description: |
            A descriptive name for the Garden. This is used as the prefix of the MQTT topic for sending messages to the controller, so it is recommended to avoid spaces and the following characters are not allowed: `[$#*>+/]`
          example: garden
        max_plants:
          type: integer
          description: used to help with validation and avoid errors. This represents the maximum number of Plants that this Garden is able to water
          example: 3
          minimum: 0
        light_schedule:
          type: object
          description: describes when to turn on a light and for how long to leave it on
          properties:
            duration:
              type: string
              format: duration
              description: duration string to determine how long to leave a light on
              example: 14h
            start_time:
              type: string
              format: time
              description: time that the light should be turned on
              example: 23:00:00-07:00
            adhoc_on_time:
              type: string
              format: date-time
              description: if a light delay was used, this persists the time that the light needs to turn back on
          required:
            - duration
            - start_time
      required:
        - max_plants
