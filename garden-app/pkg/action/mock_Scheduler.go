// Code generated by mockery v2.14.0. DO NOT EDIT.

package action

import (
	influxdb "github.com/calvinmclean/automated-garden/garden-app/pkg/influxdb"
	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	mqtt "github.com/calvinmclean/automated-garden/garden-app/pkg/mqtt"

	pkg "github.com/calvinmclean/automated-garden/garden-app/pkg"

	storage "github.com/calvinmclean/automated-garden/garden-app/pkg/storage"

	time "time"

	weather "github.com/calvinmclean/automated-garden/garden-app/pkg/weather"

	xid "github.com/rs/xid"
)

// MockScheduler is an autogenerated mock type for the Scheduler type
type MockScheduler struct {
	mock.Mock
}

// GetNextLightTime provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockScheduler) GetNextLightTime(_a0 *logrus.Entry, _a1 *pkg.Garden, _a2 pkg.LightState) *time.Time {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden, pkg.LightState) *time.Time); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetNextWaterTime provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) GetNextWaterTime(_a0 *logrus.Entry, _a1 *pkg.Zone) *time.Time {
	ret := _m.Called(_a0, _a1)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Zone) *time.Time); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// InfluxDBClient provides a mock function with given fields:
func (_m *MockScheduler) InfluxDBClient() influxdb.Client {
	ret := _m.Called()

	var r0 influxdb.Client
	if rf, ok := ret.Get(0).(func() influxdb.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(influxdb.Client)
		}
	}

	return r0
}

// MQTTClient provides a mock function with given fields:
func (_m *MockScheduler) MQTTClient() mqtt.Client {
	ret := _m.Called()

	var r0 mqtt.Client
	if rf, ok := ret.Get(0).(func() mqtt.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Client)
		}
	}

	return r0
}

// RemoveJobsByID provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) RemoveJobsByID(_a0 *logrus.Entry, _a1 xid.ID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, xid.ID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetLightSchedule provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) ResetLightSchedule(_a0 *logrus.Entry, _a1 *pkg.Garden) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetWaterSchedule provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockScheduler) ResetWaterSchedule(_a0 *logrus.Entry, _a1 *pkg.Garden, _a2 *pkg.Zone) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden, *pkg.Zone) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleLightActions provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) ScheduleLightActions(_a0 *logrus.Entry, _a1 *pkg.Garden) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleLightDelay provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockScheduler) ScheduleLightDelay(_a0 *logrus.Entry, _a1 *pkg.Garden, _a2 *LightAction) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden, *LightAction) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleWaterAction provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockScheduler) ScheduleWaterAction(_a0 *logrus.Entry, _a1 *pkg.Garden, _a2 *pkg.Zone) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(*logrus.Entry, *pkg.Garden, *pkg.Zone) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAsync provides a mock function with given fields:
func (_m *MockScheduler) StartAsync() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *MockScheduler) Stop() {
	_m.Called()
}

// StorageClient provides a mock function with given fields:
func (_m *MockScheduler) StorageClient() storage.Client {
	ret := _m.Called()

	var r0 storage.Client
	if rf, ok := ret.Get(0).(func() storage.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Client)
		}
	}

	return r0
}

// WeatherClient provides a mock function with given fields:
func (_m *MockScheduler) WeatherClient() weather.Client {
	ret := _m.Called()

	var r0 weather.Client
	if rf, ok := ret.Get(0).(func() weather.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(weather.Client)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockScheduler interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockScheduler creates a new instance of MockScheduler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockScheduler(t mockConstructorTestingTNewMockScheduler) *MockScheduler {
	mock := &MockScheduler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
