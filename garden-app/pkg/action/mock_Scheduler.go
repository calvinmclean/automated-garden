// Code generated by mockery v2.9.4. DO NOT EDIT.

package action

import (
	influxdb "github.com/calvinmclean/automated-garden/garden-app/pkg/influxdb"
	mock "github.com/stretchr/testify/mock"

	mqtt "github.com/calvinmclean/automated-garden/garden-app/pkg/mqtt"

	pkg "github.com/calvinmclean/automated-garden/garden-app/pkg"

	storage "github.com/calvinmclean/automated-garden/garden-app/pkg/storage"

	time "time"

	xid "github.com/rs/xid"
)

// MockScheduler is an autogenerated mock type for the Scheduler type
type MockScheduler struct {
	mock.Mock
}

// GetNextLightTime provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) GetNextLightTime(_a0 *pkg.Garden, _a1 pkg.LightState) *time.Time {
	ret := _m.Called(_a0, _a1)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(*pkg.Garden, pkg.LightState) *time.Time); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// GetNextWateringTime provides a mock function with given fields: _a0
func (_m *MockScheduler) GetNextWateringTime(_a0 *pkg.Plant) *time.Time {
	ret := _m.Called(_a0)

	var r0 *time.Time
	if rf, ok := ret.Get(0).(func(*pkg.Plant) *time.Time); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}

	return r0
}

// InfluxDBClient provides a mock function with given fields:
func (_m *MockScheduler) InfluxDBClient() influxdb.Client {
	ret := _m.Called()

	var r0 influxdb.Client
	if rf, ok := ret.Get(0).(func() influxdb.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(influxdb.Client)
		}
	}

	return r0
}

// MQTTClient provides a mock function with given fields:
func (_m *MockScheduler) MQTTClient() mqtt.Client {
	ret := _m.Called()

	var r0 mqtt.Client
	if rf, ok := ret.Get(0).(func() mqtt.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mqtt.Client)
		}
	}

	return r0
}

// RemoveJobsByID provides a mock function with given fields: _a0
func (_m *MockScheduler) RemoveJobsByID(_a0 xid.ID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(xid.ID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetLightingSchedule provides a mock function with given fields: _a0
func (_m *MockScheduler) ResetLightingSchedule(_a0 *pkg.Garden) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetWateringSchedule provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) ResetWateringSchedule(_a0 *pkg.Garden, _a1 *pkg.Plant) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden, *pkg.Plant) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleLightActions provides a mock function with given fields: _a0
func (_m *MockScheduler) ScheduleLightActions(_a0 *pkg.Garden) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleLightDelay provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) ScheduleLightDelay(_a0 *pkg.Garden, _a1 *LightAction) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden, *LightAction) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ScheduleWateringAction provides a mock function with given fields: _a0, _a1
func (_m *MockScheduler) ScheduleWateringAction(_a0 *pkg.Garden, _a1 *pkg.Plant) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden, *pkg.Plant) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartAsync provides a mock function with given fields:
func (_m *MockScheduler) StartAsync() {
	_m.Called()
}

// Stop provides a mock function with given fields:
func (_m *MockScheduler) Stop() {
	_m.Called()
}

// StorageClient provides a mock function with given fields:
func (_m *MockScheduler) StorageClient() storage.Client {
	ret := _m.Called()

	var r0 storage.Client
	if rf, ok := ret.Get(0).(func() storage.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Client)
		}
	}

	return r0
}
