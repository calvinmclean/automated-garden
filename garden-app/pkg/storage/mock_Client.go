// Code generated by mockery v2.9.4. DO NOT EDIT.

package storage

import (
	pkg "github.com/calvinmclean/automated-garden/garden-app/pkg"
	xid "github.com/rs/xid"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// DeleteGarden provides a mock function with given fields: _a0
func (_m *MockClient) DeleteGarden(_a0 xid.ID) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(xid.ID) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePlant provides a mock function with given fields: _a0, _a1
func (_m *MockClient) DeletePlant(_a0 xid.ID, _a1 xid.ID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(xid.ID, xid.ID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGarden provides a mock function with given fields: _a0
func (_m *MockClient) GetGarden(_a0 xid.ID) (*pkg.Garden, error) {
	ret := _m.Called(_a0)

	var r0 *pkg.Garden
	if rf, ok := ret.Get(0).(func(xid.ID) *pkg.Garden); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.Garden)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(xid.ID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGardens provides a mock function with given fields: _a0
func (_m *MockClient) GetGardens(_a0 bool) ([]*pkg.Garden, error) {
	ret := _m.Called(_a0)

	var r0 []*pkg.Garden
	if rf, ok := ret.Get(0).(func(bool) []*pkg.Garden); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.Garden)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlant provides a mock function with given fields: _a0, _a1
func (_m *MockClient) GetPlant(_a0 xid.ID, _a1 xid.ID) (*pkg.Plant, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pkg.Plant
	if rf, ok := ret.Get(0).(func(xid.ID, xid.ID) *pkg.Plant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pkg.Plant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(xid.ID, xid.ID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlants provides a mock function with given fields: _a0, _a1
func (_m *MockClient) GetPlants(_a0 xid.ID, _a1 bool) ([]*pkg.Plant, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*pkg.Plant
	if rf, ok := ret.Get(0).(func(xid.ID, bool) []*pkg.Plant); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.Plant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(xid.ID, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields:
func (_m *MockClient) Save() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveGarden provides a mock function with given fields: _a0
func (_m *MockClient) SaveGarden(_a0 *pkg.Garden) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*pkg.Garden) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePlant provides a mock function with given fields: _a0, _a1
func (_m *MockClient) SavePlant(_a0 xid.ID, _a1 *pkg.Plant) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(xid.ID, *pkg.Plant) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
