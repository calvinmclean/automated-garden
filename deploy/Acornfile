args: {
  // Run a mock garden-controller alongside the application
  mockController: false

  // Only run dependencies so garden-app can be run locally with "go run"
  dependenciesOnly: false
}

containers: {
  if !args.dependenciesOnly {
    "garden-app": {
      // image: "ghcr.io/calvinmclean/garden-app"
      build: "../garden-app"
      command: #"server --config /app/configs/config.yaml"#
      ports: publish: "8080/http"
      dirs: {
        "/app/configs": "./configs/garden-app"
      }
      env: {
        "GARDEN_APP_WEATHER_OPTIONS_CLIENT_ID": "secret://weather-client/id"
        "GARDEN_APP_WEATHER_OPTIONS_AUTHENTICATION_ACCESS_TOKEN": "secret://weather-client/access_token"
        "GARDEN_APP_WEATHER_OPTIONS_AUTHENTICATION_REFRESH_TOKEN": "secret://weather-client/refresh_token"
      }
      dependsOn: ["mqtt", "influxdb"]
    }
  }

  mqtt: {
    image: "eclipse-mosquitto:2.0"
    dirs: {
      "/mosquitto/config": "./configs/mosquitto"
    }
    ports: {
      publish: ["1883/tcp", "9001/tcp"]
    }
  }

  telegraf: {
    image: "telegraf:1.23"
    dirs: {
      "/etc/telegraf": "./configs/telegraf"
    }
    env: {
      "INFLUXDB_TOKEN": localData.influxdb.token
      "INFLUXDB_ORG": localData.influxdb.org
      "INFLUXDB_BUCKET": localData.influxdb.bucket
      "MQTT_WATER_TOPIC": localData.mqtt.waterTopic
      "MQTT_LIGHT_TOPIC": localData.mqtt.lightTopic
      "MQTT_MOISTURE_TOPIC": localData.mqtt.moistureTopic
      "MQTT_LOGGING_TOPIC": localData.mqtt.loggingTopic
      "MQTT_HEALTH_TOPIC": localData.mqtt.healthTopic
    }
    dependsOn: ["mqtt", "influxdb"]
  }

  influxdb: {
    image: "quay.io/influxdb/influxdb:v2.0.2"
    ports: publish: "8086/http"
    env: {
      "INFLUXDB_TOKEN": localData.influxdb.token
      "INFLUXDB_ORG": localData.influxdb.org
      "INFLUXDB_BUCKET": localData.influxdb.bucket
      "ADMIN_USER": localData.influxdb.adminUser
      "ADMIN_PSWD": localData.influxdb.adminPassword
    }
  }

  grafana: {
    image: "grafana/grafana:latest"
    ports: publish: "3000/http"
    env: {
      "GF_SECURITY_ADMIN_USER": localData.influxdb.adminUser
      "GF_SECURITY_ADMIN_PASSWORD": localData.influxdb.adminPassword
      "GF_PATHS_PROVISIONING": localData.grafana.pathsProvisioning
      "INFLUXDB_TOKEN": localData.influxdb.token
      "INFLUXDB_ORG": localData.influxdb.org
      "INFLUXDB_BUCKET": localData.influxdb.bucket
    }
    dirs: {
      "/etc/grafana/provisioning": "./configs/grafana"
    }
  }

  prometheus: {
    image: "prom/prometheus"
    ports: publish: "9090/http"
    dirs: {
      "/etc/prometheus": "./configs/prometheus"
    }
  }
  
  if args.mockController && !args.dependenciesOnly {
    "garden-controller": {
      // image: "ghcr.io/calvinmclean/garden-app"
      build: "../garden-app"
      command: [
        "controller",
        "--config=/app/configs/config.yaml",
        "--enable-ui=false",
        "--log-level=debug"
      ]
      dirs: {
        "/app/configs": "./configs/garden-app"
      }
      dependsOn: ["mqtt"]
    }
  }
}

jobs: {
  "influxdb-setup": {
    image: "quay.io/influxdb/influxdb:v2.0.2"
    dirs: {
      "/entrypoint": "./influxdb_setup"
    }
    command: #"/entrypoint/entrypoint.sh"#
    env: {
      "INFLUXDB_TOKEN": localData.influxdb.token
      "INFLUXDB_ORG": localData.influxdb.org
      "INFLUXDB_BUCKET": localData.influxdb.bucket
      "ADMIN_USER": localData.influxdb.adminUser
      "ADMIN_PSWD": localData.influxdb.adminPassword
    }
    dependsOn: ["influxdb"]
  }
}

localData: {
  influxdb: {
    token: "my-secret-token"
    org: "garden"
    bucket: "garden"
    adminUser: "admin"
    adminPassword: "adminadmin"
  }
  mqtt: {
    waterTopic: "+/data/water"
    lightTopic: "+/data/light"
    moistureTopic: "+/data/moisture"
    loggingTopic: "+/data/logs"
    healthTopic: "+/data/health"
  }
  grafana: {
    pathsProvisioning: "/etc/grafana/provisioning"
  }
}

secrets: {
    "weather-client": {
        type: "opaque"
        data: {
            "id":            "" // optional
            "access_token":  "" // optional
            "refresh_token": "" // optional
        }
    }
}

profiles: {
  dev: {
    mockController: true
  }
}
