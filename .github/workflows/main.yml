name: CI

on:
  push:
    branches-ignore: ["assets"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  PROJECT_NAME: garden-app

jobs:
  go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check for debug prints
        id: check-print
        working-directory: ./${{ env.PROJECT_NAME }}
        run: if [[ -n $(grep -R "fmt.Print" | grep -v vendor | grep -v generate_config\.go) ]]; then echo "Did you forget to remove debug prints?" && false; else echo "All good!"; fi

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: Lint
        id: lint
        working-directory: ./${{ env.PROJECT_NAME }}
        run: echo "LINT_OUTPUT=$(golint $(go list ./... | grep -v /vendor/))" >> $GITHUB_OUTPUT

      - name: Lint Check
        run: test -z "${{ steps.lint.outputs.LINT_OUTPUT }}"

      - name: Format
        id: format
        working-directory: ./${{ env.PROJECT_NAME }}
        run: echo "FORMAT_OUTPUT=$(gofmt -d -s $(find . -name "*.go" | grep -v /vendor/))" >> $GITHUB_OUTPUT

      - name: Format Check
        run: test -z "${{ steps.format.outputs.FORMAT_OUTPUT }}"

      - name: Vet
        id: vet
        working-directory: ./${{ env.PROJECT_NAME }}
        run: echo "VET_OUTPUT=$(go vet $(go list ./... | grep -v /vendor/))" >> $GITHUB_OUTPUT

      - name: Vet Check
        run: test -z "${{ steps.vet.outputs.VET_OUTPUT }}"

  unit_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Test
        working-directory: ./${{ env.PROJECT_NAME }}
        run: go test -short -v -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

  integration_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Start containers for integration test
        working-directory: ./deploy
        run: docker compose --profile test up -d

      - name: Integration Test
        working-directory: ./${{ env.PROJECT_NAME }}/integration_tests
        run: sleep 15 && go test -v -race -covermode=atomic -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3

      - name: Remove containers for integration test
        working-directory: ./deploy
        run: docker compose --profile test down

  build:
    needs: ["unit_test", "integration_test"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.actor }}/${{ env.PROJECT_NAME }}
          flavor: |
            latest=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./${{ env.PROJECT_NAME }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
